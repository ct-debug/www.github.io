<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Apache远程命令执行漏洞</title>
      <link href="/2019/01/01/apache-yuan-cheng-ming-ling-zhi-xing-lou-dong/"/>
      <url>/2019/01/01/apache-yuan-cheng-ming-ling-zhi-xing-lou-dong/</url>
      
        <content type="html"><![CDATA[<h1 id="Apache远程命令执行漏洞"><a href="#Apache远程命令执行漏洞" class="headerlink" title="Apache远程命令执行漏洞"></a>Apache远程命令执行漏洞</h1><h2 id="一、SHTML"><a href="#一、SHTML" class="headerlink" title="一、SHTML"></a>一、SHTML</h2><h3 id="sthtml简介："><a href="#sthtml简介：" class="headerlink" title="sthtml简介："></a>sthtml简介：</h3><blockquote><p>shtml是一种基于SSI技术的文件，也就是(Server Side Include)SSI服务器端包含指令，一些Web Server如果有SSI功能的话就会对shtml文件特殊招待，服务器会先扫一次shtml文件看没有特殊的SSI指令存在，如果有的话就按Web Server设定规则解释SSI指令，解释完后跟一般html一起调去客户端。</p></blockquote><h3 id="html或htm与shtml或shtm的关系："><a href="#html或htm与shtml或shtm的关系：" class="headerlink" title="html或htm与shtml或shtm的关系："></a>html或htm与shtml或shtm的关系：</h3><blockquote><p>html或者htm是一种静态的页面格式，也就是说不需要服务器解析其中的脚本，或者说里面没有服务器端执行的脚本，而shtml或者shtm由于它基于SSI技术，当有服务器端可执行脚本时被当作一种动态编程语言来看待，就如asp、jsp或者php一样。当shtml或者shtm中不包含服务器端可执行脚本时其作用和html或者htm是一样的。</p></blockquote><h2 id="二、SSI指令"><a href="#二、SSI指令" class="headerlink" title="二、SSI指令"></a>二、SSI指令</h2><h3 id="1-SSI：（Server-Side-Include）的简写，服务器端嵌入或者服务器端包含。"><a href="#1-SSI：（Server-Side-Include）的简写，服务器端嵌入或者服务器端包含。" class="headerlink" title="1.SSI：（Server Side Include）的简写，服务器端嵌入或者服务器端包含。"></a>1.SSI：（Server Side Include）的简写，服务器端嵌入或者服务器端包含。</h3><blockquote><p>通过在文档中加入SSI指令，服务器端在输出文档之前会解析SSI指令，并把解析完的结果和文档一同输出给客户端。</p></blockquote><h3 id="2-SSI的指令格式为："><a href="#2-SSI的指令格式为：" class="headerlink" title="2.SSI的指令格式为："></a>2.SSI的指令格式为：</h3><p><code>&lt;!-- #directive parameter="value" --&gt;</code></p><blockquote><p><code>&lt;!-- --&gt;</code>：是HTML语法中表示注释，当WEB服务器不支持SSI时，会忽略这些信息。<br><code>directive</code>：指令名<br><code>parameter</code>：指令参数<br><code>value</code>：指令参数值</p></blockquote><blockquote><p>SSI的指令格式形如HTML注释。在将内容发送到浏览器之前，可以使用SSI指令将文本、图形或应用程序信息包含到网页中，如果Web服务器开启了SSI功能模块，并且页面包含可以解析的指令，那么Web服务器就会解析这个指令。若服务端没开启SSI功能模块或者开启了SSI功能模块，但是页面包含的指令不是可以解析的指令，那么将当做注释处理。</p></blockquote><h3 id="3-SSI包含的指令有"><a href="#3-SSI包含的指令有" class="headerlink" title="3.SSI包含的指令有:"></a>3.SSI包含的指令有:</h3><blockquote><p>config：修改 SSI 的默认设置<br>echo：显示环境变量<br>exec：执行 CGI 脚本<br>flastmod ：显示指定文件的最后修改日期<br>fsize：显示指定文件的大小<br>include：把其它文档插入到当前被解析的文档中</p></blockquote><h2 id="三、漏洞复现"><a href="#三、漏洞复现" class="headerlink" title="三、漏洞复现"></a>三、漏洞复现</h2><h3 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h3><img src="/2019/01/01/apache-yuan-cheng-ming-ling-zhi-xing-lou-dong/%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83.png" class="" title="靶场环境"><h3 id="2-web页面http-ip-8080-upload-php"><a href="#2-web页面http-ip-8080-upload-php" class="headerlink" title="2.web页面http://ip:8080/upload.php"></a>2.web页面<a href="http://ip:8080/upload.php">http://ip:8080/upload.php</a></h3><img src="/2019/01/01/apache-yuan-cheng-ming-ling-zhi-xing-lou-dong/web.png" class="" title="web"><h3 id="3-上传1-shtml文件"><a href="#3-上传1-shtml文件" class="headerlink" title="3.上传1.shtml文件"></a>3.上传1.shtml文件</h3><img src="/2019/01/01/apache-yuan-cheng-ming-ling-zhi-xing-lou-dong/1.shtml.png" class="" title="1.shtml"><h3 id="4-上传成功"><a href="#4-上传成功" class="headerlink" title="4.上传成功"></a>4.上传成功</h3><img src="/2019/01/01/apache-yuan-cheng-ming-ling-zhi-xing-lou-dong/%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F.png" class="" title="上传成功"><h3 id="5-访问http-ip-8080-1-shtml"><a href="#5-访问http-ip-8080-1-shtml" class="headerlink" title="5.访问http://ip:8080/1.shtml"></a>5.访问<a href="http://ip:8080/1.shtml">http://ip:8080/1.shtml</a></h3><img src="/2019/01/01/apache-yuan-cheng-ming-ling-zhi-xing-lou-dong/%E8%AE%BF%E9%97%AE1.shtml%E6%88%90%E5%8A%9F.png" class="" title="访问1.shtml成功"><h3 id="6-服务器验证"><a href="#6-服务器验证" class="headerlink" title="6.服务器验证"></a>6.服务器验证</h3><img src="/2019/01/01/apache-yuan-cheng-ming-ling-zhi-xing-lou-dong/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png" class="" title="服务器文件内容">]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Apache </tag>
            
            <tag> 远程命令执行 </tag>
            
            <tag> 漏洞复现 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS8.2 ftp服务器搭建</title>
      <link href="/2019/01/01/centos-8.2-ftp-fu-wu-qi-da-jian/"/>
      <url>/2019/01/01/centos-8.2-ftp-fu-wu-qi-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-8-2-ftp服务器搭建"><a href="#CentOS-8-2-ftp服务器搭建" class="headerlink" title="CentOS 8.2 ftp服务器搭建"></a>CentOS 8.2 ftp服务器搭建</h1><h2 id="安装vsftpd"><a href="#安装vsftpd" class="headerlink" title="安装vsftpd"></a>安装vsftpd</h2><p><code>yum install -y vsftpd</code></p><ul><li><p>配置文件目录<code>/etc/vsftpd</code></p></li><li><p>主配置文件<code>/etc/vsftpd/vsftpd.conf</code></p></li><li><p>不允许访问FTP服务器的用户<code>/etc/vsftpd/ftpusers</code></p></li><li><p>允许访问FTP服务器的用户<code>/etc/vsftpd/user_list</code></p></li><li><p>启动服务<code>systemctl start vsftpd.service</code></p></li><li><p>重启服务<code>systemctl restart vsftpd.service</code></p></li><li><p>开机自启<code>systemctl enable vsftpd.service</code></p></li><li><p>查看服务状态<code>systemctl status vsftpd.service</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2></li><li><p>pasv模式即被动模式<br><code>pasv_min_port=65400</code>pasv最小端口<br><code>pasv_max_port=65420</code>pasv最大端口</p></li><li><p>建立一个ftp用户，此用户不能登陆系统，且只能访问自己主目录下的文件<br><code>useradd -d /var/ftp/test -g ftp -s /sbin/nologin ftpuser</code></p><blockquote><p>-d 指定用户主目录。-g 指定用户分组。-s /sbin/nologin 禁止用户登陆系统。ftpuser 新建用户的用户名</p></blockquote></li><li><p>设置密码<br><code>passwd ftpuser</code></p></li><li><p>建立用户以后，需要配置用户可登陆名单，并将新建用户添加进入ftp可登陆名单中</p></li><li><p>配置用户名单的方式是：打开配置文件，找到如下两行，去掉其注释符号<br><code>chroot_list_enable=YES</code><br><code>chroot_list_file=/etc/vsftpd/chroot_list</code></p></li><li><p>只有名单中的用户可以登陆系统</p><h2 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h2></li><li><p>简单粗暴直接关闭<code>systemctl stop firewalld</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> FTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Termux</title>
      <link href="/2019/01/01/termux/"/>
      <url>/2019/01/01/termux/</url>
      
        <content type="html"><![CDATA[<h4 id="更换国内源"><a href="#更换国内源" class="headerlink" title="更换国内源"></a>更换国内源</h4><p>更换Termux清华大学源, 加快软件包下载速度。</p><p>设置默认编辑器</p><pre class=" language-shell"><code class="language-shell">export EDITOR=vi</code></pre><p>编辑源文件</p><pre class=" language-shell"><code class="language-shell">apt edit-sources </code></pre><p>将原来的<a href="https://termux.net官方源替换为http//mirrors.tuna.tsinghua.edu.cn/termux">https://termux.net官方源替换为http://mirrors.tuna.tsinghua.edu.cn/termux</a></p><h4 id="安装基本工具"><a href="#安装基本工具" class="headerlink" title="安装基本工具"></a>安装基本工具</h4><pre class=" language-shell"><code class="language-shell">pkg updatepkg install vim curl wget git unzip unrar nmap pythonpip install sqlmap requests</code></pre><h4 id="管理员身份"><a href="#管理员身份" class="headerlink" title="管理员身份"></a>管理员身份</h4><p>手机没有 root,可利用proot工具来模拟某些需要 root 的环境</p><pre class=" language-shell"><code class="language-shell">pkg install proot</code></pre><p>然后终端下面输入:</p><pre class=" language-shell"><code class="language-shell">termux-chroot</code></pre><p>即可模拟root环境，在这个proot环境下面, 相当于是进入了home目录，可以很方便地进行一些配置。在管理员身份下，输入exit可回到普通用户身份。</p><p>参考：Termux 高级终端安装使用配置教程 url:<a href="https://blog.csdn.net/uuu987/article/details/86773791">https://blog.csdn.net/uuu987/article/details/86773791</a></p><h4 id="克隆metasploit"><a href="#克隆metasploit" class="headerlink" title="克隆metasploit"></a>克隆metasploit</h4><pre class=" language-shell"><code class="language-shell">cd /usrgit clone https://github.com/gushmazuko/metasploit_in_termux</code></pre><h4 id="安装metasploit"><a href="#安装metasploit" class="headerlink" title="安装metasploit"></a>安装metasploit</h4><pre class=" language-shell"><code class="language-shell">chmod +x *.sh && ./metasploit.sh</code></pre><p>参考url：<a href="https://www.bilibili.com/video/av930092985/">https://www.bilibili.com/video/av930092985/</a></p><h4 id="解决中文乱码问题"><a href="#解决中文乱码问题" class="headerlink" title="解决中文乱码问题"></a>解决中文乱码问题</h4><p>在home目录下, 新建.vimrc文件</p><pre class=" language-shell"><code class="language-shell">vim .vimrc</code></pre><p>添加内容如下:</p><pre class=" language-shell"><code class="language-shell">set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1set enc=utf8set fencs=utf8,gbk,gb2312,gb18030</code></pre><p>然后source下变量:</p><pre class=" language-shell"><code class="language-shell">source .vimrc</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Termux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS上安装Docker引擎</title>
      <link href="/2019/01/01/centos-shang-an-zhuang-docker-yin-qing/"/>
      <url>/2019/01/01/centos-shang-an-zhuang-docker-yin-qing/</url>
      
        <content type="html"><![CDATA[<p><strong>要在 CentOS 上开始使用 Docker Engine，请确保 满足先决条件，然后 安装 Docker。</strong></p><p><strong>先决条件</strong></p><blockquote><p>操作系统要求要安装 Docker 引擎，您需要 CentOS 7 或 8 的维护版本。不支持或测试存档版本。</p></blockquote><blockquote><p>该centos-extras库必须启用。默认情况下启用此存储库，但如果您已禁用它，则需要重新启用它。</p></blockquote><blockquote><p>overlay2推荐使用存储驱动。</p></blockquote><p><strong>卸载旧版本</strong></p><blockquote><p>旧版本的 Docker 被称为docker或docker-engine。如果安装了这些，请卸载它们以及相关的依赖项。</p></blockquote><pre class=" language-shell"><code class="language-shell"> $sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><p><strong>安装方法</strong></p><blockquote><p>您可以根据需要以不同方式安装 Docker Engine：</p></blockquote><blockquote><p>大多数用户 设置 Docker 的存储库并从中安装，以便于安装和升级任务。这是推荐的方法。</p></blockquote><blockquote><p>一些用户下载 RPM 包并 手动安装并完全手动管理升级。这在某些情况下非常有用，例如在无法访问互联网的气隙系统上安装 Docker。</p></blockquote><blockquote><p>在测试和开发环境中，部分用户选择使用自动化 便捷脚本来安装Docker。</p></blockquote><p><strong>使用存储库安装</strong><br>在新主机上首次安装 Docker Engine 之前，您需要设置 Docker 存储库。之后，您可以从存储库安装和更新 Docker。</p><p><strong>设置存储库</strong><br>安装yum-utils包（提供yum-config-manager 实用程序）并设置稳定存储库。</p><pre class=" language-shell"><code class="language-shell">$ sudo yum install -y yum-utils$ sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p><strong>可选：启用夜间或测试存储库</strong></p><p>这些存储库包含在docker.repo上面的文件中，但默认情况下是禁用的。您可以在稳定存储库旁边启用它们。以下命令启用夜间存储库。</p><p><code>$ sudo yum-config-manager --enable docker-ce-nightly</code></p><p>要启用测试通道，请运行以下命令：</p><p><code>$ sudo yum-config-manager --enable docker-ce-test</code></p><p>您可以通过运行带有标志的命令来禁用夜间或测试存储库 。要重新启用它，请使用该标志。以下命令禁用夜间存储库。</p><p><code>$ yum-config-manager--disable--enable</code></p><p><code>$ sudo yum-config-manager --disable docker-ce-nightly</code></p><p>了解nightly和test频道。</p><p><strong>安装 Docker 引擎</strong></p><p>安装最新版本的 Docker Engine 和 containerd，或者进入下一步安装特定版本：</p><p><code>&amp; sudo yum install docker-ce docker-ce-cli containerd.io</code><br>如果提示接受 GPG 密钥，请验证指纹是否匹配060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35，如果匹配 ，请接受。</p><p><strong>多个 Docker 存储库</strong></p><p>如果您启用了多个 Docker 存储库，则在yum install或 yum update命令中未指定版本的情况下安装或更新始终会安装可能的最高版本，这可能不适合您的稳定性需求。</p><p>此命令会安装 Docker，但不会启动 Docker。它还会创建一个 docker组，但是，默认情况下它不会向该组添加任何用户。</p><p>要安装特定版本的 Docker Engine，请在 repo 中列出可用版本，然后选择并安装：</p><p>一种。列出并排序您的存储库中可用的版本。本示例按版本号对结果进行排序，从高到低，并被截断：</p><p><code>$ yum list docker-ce --showduplicates | sort -r</code></p><p>返回的列表取决于启用的存储库，并且特定于您的 CentOS 版本（.el7在本示例中由后缀表示）。</p><p>通过完全限定的包名称安装特定版本，即包名称 ( docker-ce) 加上从第一个冒号 ( :)开始的版本字符串（第 2 列），直到第一个连字符，由连字符 ( -)分隔。例如，docker-ce-18.09.1。</p><p><code>$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</code><br>此命令会安装 Docker，但不会启动 Docker。它还会创建一个 docker组，但是，默认情况下它不会向该组添加任何用户。</p><p><strong>启动 Docker</strong></p><p><code>$ sudo systemctl start docker</code><br>通过运行hello-world 映像验证 Docker Engine 是否已正确安装。</p><p><code>$ sudo docker run hello-world</code><br>此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p><p>这将安装并运行 Docker 引擎。使用sudo运行泊坞窗命令。继续Linux postinstall以允许非特权用户运行 Docker 命令和其他可选配置步骤。</p><p><strong>升级 Docker 引擎</strong><br>要升级 Docker Engine，请按照安装说明，选择要安装的新版本。</p><p><strong>卸载 Docker 引擎</strong><br>卸载 Docker Engine、CLI 和 Containerd 包：</p><pre class=" language-shell"><code class="language-shell">$ sudo yum remove docker-ce docker-ce-cli containerd.io</code></pre><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有镜像、容器和卷：</p><pre class=" language-shell"><code class="language-shell">$ sudo rm -rf /var/lib/docker$ sudo rm -rf /var/lib/containerd</code></pre><p>您必须手动删除任何已编辑的配置文件。</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> CentOS </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali Linux 2020版更新源及中文设置问题解决方案</title>
      <link href="/2019/01/01/kali-linux-2020-ban-geng-xin-yuan-ji-zhong-wen-she-zhi-wen-ti-jie-jue-fang-an/"/>
      <url>/2019/01/01/kali-linux-2020-ban-geng-xin-yuan-ji-zhong-wen-she-zhi-wen-ti-jie-jue-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="kali-linux-2020版"><a href="#kali-linux-2020版" class="headerlink" title="kali linux 2020版"></a>kali linux 2020版</h1><h2 id="将kali的更新源切换成国内的源"><a href="#将kali的更新源切换成国内的源" class="headerlink" title="将kali的更新源切换成国内的源"></a>将kali的更新源切换成国内的源</h2><pre class=" language-shell"><code class="language-shell">sudo su - //root权限kali      //密码sudo apt-get install leafpad //安装文本编辑器vim /etc/apt/sources.list //打开文件</code></pre><blockquote><p>将默认的源文件替换<br>（下面介绍替换的具体操作，熟悉Linux操作指令）<br>输入 i 进入编辑模式（编辑的就是刚打开的sources.list文件）<br>将旧的源文件删掉或者注释掉（里面除了原来的更新源都是注释，不用怕删掉不该删的）<br>将新的更新源复制粘贴到该文件中，注意Linux终端下粘贴快捷键是：Ctrl + Shift + V<br>按 ESC 退出编辑模式，按 ： 再按 wq 保存，回车就完成了</p></blockquote><pre class=" language-shell"><code class="language-shell">apt-get update & apt-get upgrade //更新apt-get dist-upgradeapt-get clean查看系统版本  命令：lsb_release -a查看内核版本  命令：uname -r更新源：#中科大deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib #阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib #清华大学deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free #浙大deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free #东软大学deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contribdeb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib #官方源deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib deb http://mirrors.163.com/debian/ jessie main non-free contribdeb http://mirrors.163.com/debian/ jessie-updates main non-free contribdeb http://mirrors.163.com/debian/ jessie-backports main non-free contribdeb-src http://mirrors.163.com/debian/ jessie main non-free contribdeb-src http://mirrors.163.com/debian/ jessie-updates main non-free contribdeb-src http://mirrors.163.com/debian/ jessie-backports main non-free contribdeb http://mirrors.163.com/debian-security/ jessie/updates main non-free contribdeb-src http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</code></pre><h2 id="中文设置问题解决方案"><a href="#中文设置问题解决方案" class="headerlink" title="中文设置问题解决方案"></a>中文设置问题解决方案</h2><p>1.在root用户下直接输入“dpkg-reconfigure locales”命令，如果是kali普通用户则输入“sudo dpkg-reconfigure locales”  然后输入密码kali</p><p>2.先找到en_US.UTF-8，空格键取消它，然后再找到zh_CN.UTF-8，空格键选中</p><p>3.单击确定后，下一界面，选择zh_CN.UTF-8，确定</p><p>4.然后reboot重启生效</p><p>5.重启后会出现乱码，再次打开终端，输入“apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy”下载中文字体</p><pre class=" language-shell"><code class="language-shell">#安装中文字体：(1)sudo apt-get install xfonts-intl-chinese#输入当前用户密码#安装中文字体：(2)sudo apt-get install ttf-wqy-microhei#输入当前用户密码</code></pre><p>6.之后reboot重启，重启后就完成了kali的中文配置</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> kali </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象基础知识</title>
      <link href="/2019/01/01/java-mian-xiang-dui-xiang-ji-chu-zhi-shi/"/>
      <url>/2019/01/01/java-mian-xiang-dui-xiang-ji-chu-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象实例："><a href="#Java面向对象实例：" class="headerlink" title="Java面向对象实例："></a>Java面向对象实例：</h1><h2 id="1-Java继承"><a href="#1-Java继承" class="headerlink" title="1. Java继承"></a>1. Java继承</h2><h3 id="1-1-继承的概念"><a href="#1-1-继承的概念" class="headerlink" title="1.1 继承的概念"></a>1.1 继承的概念</h3><blockquote><p>继承在本职上是特殊——一般的关系，即常说的is-a关系。子类继承父类，表明子类是一种特殊的父类，并且具有父类所不具有的一些属性或方法。通过 extends 关键字可以声明一个类是从另外一个类继承而来的。</p></blockquote><h3 id="1-2-继承的特性"><a href="#1-2-继承的特性" class="headerlink" title="1.2 继承的特性"></a>1.2 继承的特性</h3><ol><li>子类拥有父类非private的属性，方法；</li><li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展；</li><li>子类可以用自己的方式实现父类的方法；</li><li>Java的继承是单继承，这是Java继承区别于C++继承的一个特性；</li><li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系）。</li></ol><h3 id="1-3-继承关键字"><a href="#1-3-继承关键字" class="headerlink" title="1.3 继承关键字"></a>1.3 继承关键字</h3><ol><li>使用 extends 和 implements 来实现继承，所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承Object；</li><li>一个子类只能拥有一个父类，所以 extends 只能继承一个类；</li><li>使用 implements 关键字变相的使Java具有多继承的特性，为类继承接口，可以同时继承多个接口；</li><li>通过super关键字来实现对父类成员的访问，用来引用当前对象的父类；</li><li>final 关键字</li></ol><blockquote><ul><li>声明类则把类定义为不能继承的，即最终类；修饰方法，则该方法不能被子类重写；定义实例变量，则变量不能被修改；</li><li>final 类的方法自动为 final方法，但实例变量不自动是 final变量。</li></ul></blockquote><h3 id="1-4-Java重写与重载"><a href="#1-4-Java重写与重载" class="headerlink" title="1.4 Java重写与重载"></a>1.4 Java重写与重载</h3><blockquote><p><strong>重写（Override）</strong></p><ol><li>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写；</li><li>重写的好处在于子类可以根据需要，定义特定于自己的行为。也就是说子类能够根据需要实现父类的方法；</li><li>重写方法不能抛出新的检查异常或者比被重写方法声明更加宽泛的异常。</li></ol><p><strong>重载(Overload)</strong></p><ol><li>重载是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同；</li><li>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</li></ol></blockquote><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><ol><li><p>子类不能继承父类的构造器（构造方法或者构造函数），但是父类的构造器带有参数的，则必须在子类的构造器中显式地通过super关键字调用父类的构造器并配以适当的参数列表；</p></li><li><p>如果父类有无参构造器，则在子类的构造器中用super调用父类构造器不是必须的，如果没有使用super关键字，系统会自动调用父类的无参构造器。</p><h4 id="重写（Override）"><a href="#重写（Override）" class="headerlink" title="重写（Override）"></a>重写（Override）</h4></li><li><p>尽管b属于Animal类型，但是它运行的是Dog类的move方法；</p></li><li><p>在编译阶段，只是检查参数的引用类型。在运行时，Java虚拟机(JVM)指定对象的类型并且运行该对象的方法。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物可以移动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Animal(int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span>B <span class="token punctuation">{</span>   <span class="token keyword">final</span> String name <span class="token operator">=</span> <span class="token string">"旺财"</span><span class="token punctuation">;</span>   <span class="token keyword">final</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finalFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗可以跳墙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这只狗可以跳"</span><span class="token operator">+</span>n<span class="token operator">+</span><span class="token string">"米的墙"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//1.3.1 通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</span>       <span class="token keyword">return</span> <span class="token string">"I am a Dog "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>      <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog(int)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testsuper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----testsuper----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testoverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----testoverride-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Animal a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Animal b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          a<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          b<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JavaDemo</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          Test<span class="token punctuation">.</span><span class="token function">testsuper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Test<span class="token punctuation">.</span><span class="token function">testoverride</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>   <span class="token punctuation">}</span></code></pre><h4 id="方法的重写规则"><a href="#方法的重写规则" class="headerlink" title="方法的重写规则"></a>方法的重写规则</h4><p>   1).参数列表必须完全与被重写方法的相同；<br>   2).返回类型必须完全与被重写方法的返回类型相同；<br>   3).访问权限不能比父类中被重写的方法的访问权限更低；<br>   4).父类的成员方法只能被它的子类重写；<br>   5).声明为final的方法不能被重写；<br>   6).声明为static的方法不能被重写，但是能够被再次声明；<br>   7).子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为private和final的方法；<br>   8).子类和父类不在同一个包中，那么子类只能够重写父类的声明为public和protected的非final方法；<br>   9).重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常，但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以；<br>   10).构造方法不能被重写；<br>   11).如果不能继承一个方法，则不能重写这个方法。</p><h4 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则"></a>重载规则</h4><p>   1).被重载的方法必须改变参数列表(参数个数或类型或顺序不一样)；<br>   2).被重载的方法可以改变返回类型；<br>   3).被重载的方法可以改变访问修饰符；<br>   4).被重载的方法可以声明新的或更广的检查异常；<br>   5).方法能够在同一个类中或者在一个子类中被重载；<br>   6).无法以返回值类型作为重载函数的区分标准。</p><h4 id="重写与重载之间的区别"><a href="#重写与重载之间的区别" class="headerlink" title="重写与重载之间的区别"></a>重写与重载之间的区别</h4><p>   区别点            重载方法        重写方法<br>   参数列表       必须修改        一定不能修改<br>   返回类型       可以修改        一定不能修改<br>   异常                可以修改        可以减少或删除，一定不能抛出新的或者更广的异常<br>   访问                可以修改        一定不能做更严格的限制（可以降低限制）</p><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><blockquote><p>方法的重写和重载是Java多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载是一类中多态性的一种表现。</p></blockquote><h2 id="2-Java多态"><a href="#2-Java多态" class="headerlink" title="2.Java多态"></a>2.Java多态</h2><p> <strong>多态就是同一个接口，使用不同的实例执行不同操作多态的实现方式:重写、接口、抽象类和抽象方法。</strong></p><h4 id="Java抽象类"><a href="#Java抽象类" class="headerlink" title="Java抽象类"></a>Java抽象类</h4><p>   1).使用abstract class来定义抽象类，抽象类不能被实例化；<br>   2).抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类；<br>   3).抽象类中的抽象方法只是声明，不包含方法体；<br>   4).构造方法，类方法（用static修饰的方法）不能声明为抽象方法；<br>   5).任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</p><h4 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h4><pre class=" language-java"><code class="language-java">   <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">computePay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span></code></pre><h4 id="继承抽象类"><a href="#继承抽象类" class="headerlink" title="继承抽象类"></a>继承抽象类</h4><pre class=" language-java"><code class="language-java">   <span class="token keyword">class</span> <span class="token class-name">Salary</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">computePay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="Java接口"><a href="#Java接口" class="headerlink" title="Java接口"></a>Java接口</h4><ol><li>接口，在Java编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明；</li><li>一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类；</li><li>接口不能包含成员变量，除了 static 和 final 变量；</li><li>接口中每一个方法也是隐式抽象的,接口中的方法会被隐式的指定为 public abstract；</li><li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量；</li><li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法；</li><li>类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常；</li><li>类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型；</li><li>接口的继承使用extends关键字,允许多重继承,可能定义或继承相同的方法。<code> interface C extends A,B{}</code></li></ol><h2 id="3-Java封装"><a href="#3-Java封装" class="headerlink" title="3.Java封装"></a>3.Java封装</h2><p><strong>封装（英语：Encapsulation）是指，一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。</strong></p><h4 id="封装的优点："><a href="#封装的优点：" class="headerlink" title="封装的优点："></a>封装的优点：</h4><blockquote><ol><li>良好的封装能够减少耦合</li><li>类内部的结构可以自由修改</li><li>可以对成员变量进行更精确的控制</li><li>隐藏信息，实现细节</li></ol></blockquote><h4 id="实现Java封装的步骤："><a href="#实现Java封装的步骤：" class="headerlink" title="实现Java封装的步骤："></a>实现Java封装的步骤：</h4><blockquote><ol><li>修改属性的可见性来限制对属性的访问</li><li>对每个值属性提供对外的公共方法访问</li></ol></blockquote><h4 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h4><p>   <strong>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java支持4种不同的访问权限。</strong></p><blockquote><p>   默认的，也称为 default，在同一包内可见，不使用任何修饰符；<br>   私有的，以 private 修饰符指定，在同一类内可见；<br>   共有的，以 public 修饰符指定，对所有类可见；<br>   受保护的，以 protected 修饰符指定，对同一包内的类和所有子类可见。</p></blockquote><p>   <strong>我们可以可以通过以下表来说明访问控制权限：</strong></p><blockquote><p>   修饰符      当前类      同一包内     子孙类      其他包<br>   public             Y                   Y                  Y                   Y<br>   protected      Y                   Y                  Y                  N<br>   default           Y                   Y                  N                 N<br>   private            Y                  N                  N                 N</p></blockquote><h3 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h3><p><code>-----testsuper----</code><br><code>Animal(int)</code><br><code>Dog()</code><br><code>Animal()</code><br><code>Dog(int)</code><br><code>-----testoverride-----</code><br><code>Animal()</code><br><code>Animal(int)</code><br><code>Dog()</code><br><code>动物可以移动</code><br><code>狗可以跳墙</code></p><h3 id="实例代码："><a href="#实例代码：" class="headerlink" title="实例代码："></a>实例代码：</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> case3<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task3</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String pppName <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pppAge <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String bpName <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bpAge <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String ppcName <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ppcAge <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String bcName <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bcAge <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 测试运动员(乒乓球运动员和篮球运动员)</span>        <span class="token comment" spellcheck="true">// 乒乓球运动员</span>        <span class="token comment" spellcheck="true">// 通过带参构造函数实例化PingPangPlayer对象ppp</span>        <span class="token comment" spellcheck="true">// 输出'name---age'</span>        <span class="token comment" spellcheck="true">// 分别调用sleep()、eat()、study()、speak()方法</span>        <span class="token comment" spellcheck="true">/********* begin *********/</span>        PingPangPlayer ppp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PingPangPlayer</span><span class="token punctuation">(</span>pppName<span class="token punctuation">,</span>pppAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        ppp<span class="token punctuation">.</span><span class="token function">nameage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ppp<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ppp<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ppp<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ppp<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/********* end *********/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 篮球运动员</span>        <span class="token comment" spellcheck="true">// 通过带参构造函数实例化BasketballPlayer对象bp</span>        <span class="token comment" spellcheck="true">// 输出'name---age'</span>        <span class="token comment" spellcheck="true">// 分别调用sleep()、eat()、study()方法</span>        <span class="token comment" spellcheck="true">/********* begin *********/</span>        BasketballPlayer bp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasketballPlayer</span><span class="token punctuation">(</span>bpName<span class="token punctuation">,</span>bpAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token punctuation">.</span><span class="token function">nameage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bp<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/********* end *********/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 测试教练(乒乓球教练和篮球教练)</span>        <span class="token comment" spellcheck="true">// 乒乓球教练</span>        <span class="token comment" spellcheck="true">// 通过带参构造函数实例化PingPangCoach对象ppc</span>        <span class="token comment" spellcheck="true">// 输出'name---age'</span>        <span class="token comment" spellcheck="true">// 分别调用sleep()、eat()、teach()、speak()方法</span>        <span class="token comment" spellcheck="true">/********* begin *********/</span>        PingPangCoach ppc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PingPangCoach</span><span class="token punctuation">(</span>ppcName<span class="token punctuation">,</span>ppcAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        ppc<span class="token punctuation">.</span><span class="token function">nameage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ppc<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ppc<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ppc<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ppc<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/********* end *********/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 篮球教练</span>        <span class="token comment" spellcheck="true">// 通过带参构造函数实例化BasketballCoach对象bc</span>        <span class="token comment" spellcheck="true">// 输出'name---age'</span>        <span class="token comment" spellcheck="true">// 分别调用sleep()、eat()、teach()方法</span>        <span class="token comment" spellcheck="true">/********* begin *********/</span>        BasketballCoach bc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BasketballCoach</span><span class="token punctuation">(</span>bcName<span class="token punctuation">,</span>bcAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        bc<span class="token punctuation">.</span><span class="token function">nameage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bc<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bc<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bc<span class="token punctuation">.</span><span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/********* end *********/</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 说英语接口 声明抽象方法speak()</span><span class="token keyword">interface</span> <span class="token class-name">SpeakEnglish</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义人的抽象类Person 封装name和age</span><span class="token comment" spellcheck="true">// 无参构造函数</span><span class="token comment" spellcheck="true">// 有参构造函数初始化name和age</span><span class="token comment" spellcheck="true">// 定义具体方法sleep() 输出'人都是要睡觉的'</span><span class="token comment" spellcheck="true">// 抽象方法eat()（吃的不一样）</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人都是要睡觉的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义运动员Player（抽象类）继承自Person类</span><span class="token comment" spellcheck="true">// 无参构造函数</span><span class="token comment" spellcheck="true">// 有参构造函数初始化name和age</span><span class="token comment" spellcheck="true">// 运动员学习内容不一样，抽取为抽象 定义抽象方法study()</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义教练Coach（抽象类）继承自Person类</span><span class="token comment" spellcheck="true">// 无参构造函数</span><span class="token comment" spellcheck="true">// 有参构造函数初始化name和age</span><span class="token comment" spellcheck="true">// 教练教的不一样 定义抽象方法teach()</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Coach</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token function">Coach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Coach</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义乒乓球运动员具体类PingPangPlayer 继承自Player类并实现SpeakEnglish类（兵乓球运动员需要说英语）</span><span class="token comment" spellcheck="true">// 无参构造函数</span><span class="token comment" spellcheck="true">// 有参构造函数初始化name和age</span><span class="token comment" spellcheck="true">// 实现自己的eat()方法 输出'乒乓球运动员吃大白菜，喝小米粥'</span><span class="token comment" spellcheck="true">// 实现自己的study()方法 输出'乒乓球运动员学习如何发球和接球'</span><span class="token comment" spellcheck="true">// 实现自己的speak()方法 输出'乒乓球运动员说英语'</span><span class="token keyword">class</span> <span class="token class-name">PingPangPlayer</span> <span class="token keyword">extends</span> <span class="token class-name">Player</span> <span class="token keyword">implements</span> <span class="token class-name">SpeakEnglish</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token function">PingPangPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">PingPangPlayer</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nameage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球运动员吃大白菜，喝小米粥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球运动员学习如何发球和接球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球运动员说英语"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义篮球运动员具体类BasketballPlayer 继承自Player类 不需要继承接口，因为他不需要说英语</span><span class="token comment" spellcheck="true">// 无参构造函数</span><span class="token comment" spellcheck="true">// 有参构造函数初始化name和age</span><span class="token comment" spellcheck="true">// 实现自己的eat()方法 输出'篮球运动员吃牛肉，喝牛奶'</span><span class="token comment" spellcheck="true">// 实现自己的study()方法 输出'篮球运动员学习如何运球和投篮'</span><span class="token keyword">class</span> <span class="token class-name">BasketballPlayer</span> <span class="token keyword">extends</span> <span class="token class-name">Player</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token function">BasketballPlayer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BasketballPlayer</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nameage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"篮球运动员吃牛肉，喝牛奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"篮球运动员学习如何运球和投篮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义乒乓球教练具体类 PingPangCoach 继承自Coach类并实现SpeakEnglish类（兵乓球教练需要说英语）</span><span class="token comment" spellcheck="true">// 无参构造函数</span><span class="token comment" spellcheck="true">// 有参构造函数初始化name和age</span><span class="token comment" spellcheck="true">// 实现自己的eat()方法 输出'乒乓球教练吃小白菜，喝大米粥'</span><span class="token comment" spellcheck="true">// 实现自己的teach()方法 输出'乒乓球教练教如何发球和接球'</span><span class="token comment" spellcheck="true">// 实现自己的speak()方法 输出'乒乓球教练说英语'</span><span class="token keyword">class</span> <span class="token class-name">PingPangCoach</span> <span class="token keyword">extends</span> <span class="token class-name">Coach</span> <span class="token keyword">implements</span> <span class="token class-name">SpeakEnglish</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token function">PingPangCoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">PingPangCoach</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nameage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球教练吃小白菜，喝大米粥"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球教练教如何发球和接球"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"乒乓球教练说英语"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义篮球教练具体类BasketballCoach 继承自Coach类 不需要继承接口，因为他不需要说英语</span><span class="token comment" spellcheck="true">// 无参构造函数</span><span class="token comment" spellcheck="true">// 有参构造函数初始化name和age</span><span class="token comment" spellcheck="true">// 实现自己的eat()方法 输出'篮球教练吃羊肉，喝羊奶'</span><span class="token comment" spellcheck="true">// 实现自己的teach()方法 输出'篮球教练教如何运球和投篮'</span><span class="token keyword">class</span> <span class="token class-name">BasketballCoach</span> <span class="token keyword">extends</span> <span class="token class-name">Coach</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token function">BasketballCoach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">BasketballCoach</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nameage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"篮球教练吃羊肉，喝羊奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">teach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"篮球教练教如何运球和投篮"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/********* end  *********/</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali安装python2，python3对应的pip</title>
      <link href="/2019/01/01/kali-an-zhuang-python2-python3-dui-ying-de-pip/"/>
      <url>/2019/01/01/kali-an-zhuang-python2-python3-dui-ying-de-pip/</url>
      
        <content type="html"><![CDATA[<h2 id="kali自带python2，python3，但都没有pip包管理器"><a href="#kali自带python2，python3，但都没有pip包管理器" class="headerlink" title="kali自带python2，python3，但都没有pip包管理器"></a>kali自带python2，python3，但都没有pip包管理器</h2><pre class=" language-sh"><code class="language-sh">python -V #查看python版本python3 -V #查看python3版本</code></pre><h2 id="python2安装pip"><a href="#python2安装pip" class="headerlink" title="python2安装pip"></a>python2安装pip</h2><pre class=" language-shell"><code class="language-shell">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py   #下载pippython get-pip.py   #安装pippython -m pip -V    #查看安装pip的版本</code></pre><h2 id="python3安装pip"><a href="#python3安装pip" class="headerlink" title="python3安装pip"></a>python3安装pip</h2><pre class=" language-shell"><code class="language-shell">curl -s https://bootstrap.pypa.io/get-pip.py | python3python3 -m pip -V    #查看安装pip的版本</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> kali </tag>
            
            <tag> python </tag>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向上转型和向下转型</title>
      <link href="/2019/01/01/xiang-shang-zhuan-xing-he-xiang-xia-zhuan-xing/"/>
      <url>/2019/01/01/xiang-shang-zhuan-xing-he-xiang-xia-zhuan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="Java转型记住一句话：父类引用指向子类对象。"><a href="#Java转型记住一句话：父类引用指向子类对象。" class="headerlink" title="Java转型记住一句话：父类引用指向子类对象。"></a>Java转型记住一句话：父类引用指向子类对象。</h1><h2 id="父类引用指向子类对象"><a href="#父类引用指向子类对象" class="headerlink" title="父类引用指向子类对象"></a>父类引用指向子类对象</h2><p>向上转型</p><pre class=" language-java"><code class="language-java">Father f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向上转型不用强制转换,将子类对象转为父类对象,父类对象可以是接口。</span><span class="token comment" spellcheck="true">// 现在 f1 引用指向一个Son对象</span></code></pre><p>向下转型</p><pre class=" language-java"><code class="language-java">Son s1 <span class="token operator">=</span> <span class="token punctuation">(</span>Son<span class="token punctuation">)</span>f1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//指向子类对象的父类引用赋给子类引用叫向下转型,要强制转换,与向上转型相反，即是把父类对象转为子类对象。</span><span class="token comment" spellcheck="true">//f1 就是一个指向子类对象的父类引用。把f1赋给子类引用 s1 即 Son s1 = (Son)f1;</span><span class="token comment" spellcheck="true">//其中 f1 前面的(Son)必须加上，进行强制转换。</span></code></pre><p>父类引用能指向子类对象，而子类引用不能指向父类对象</p><pre class=" language-java"><code class="language-java">Father f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Son s2 <span class="token operator">=</span> <span class="token punctuation">(</span>Son<span class="token punctuation">)</span>f2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//出错，父类引用能指向子类对象，而子类引用不能指向父类对象</span></code></pre><h2 id="实例代码："><a href="#实例代码：" class="headerlink" title="实例代码："></a>实例代码：</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> case2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Task2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String cName <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String cSex <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cAge <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String eName <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String eSex <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> eAge <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建测试类对象test</span>        <span class="token comment" spellcheck="true">// 创建Person类对象person1,引用指向中国人,通过有参构造函数实例化中国人类对象</span>        <span class="token comment" spellcheck="true">// 通过showEat()方法调用Chinese的eat()方法</span>        <span class="token comment" spellcheck="true">// 创建Person类对象person2,引用指向英国人,通过有参构造函数实例化英国人类对象</span>        <span class="token comment" spellcheck="true">// 通过showEat()方法调用English的eat()方法</span>        <span class="token comment" spellcheck="true">/********* begin *********/</span>        Person person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span>cName<span class="token punctuation">,</span>cSex<span class="token punctuation">,</span>cAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        person1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处将调用子类的eat()方法。原因：person1实际指向的是Chinese子类，故调用时会调用子类本身的方法。</span>        <span class="token comment" spellcheck="true">//需要注意的是向上转型时person1会遗失除与父类对象共有的其他方法。如本例中的shadowBoxing()方法不再为person1所有。</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showEat</span><span class="token punctuation">(</span>person1<span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">English</span><span class="token punctuation">(</span>eName<span class="token punctuation">,</span>eSex<span class="token punctuation">,</span>eAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        person2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showEat</span><span class="token punctuation">(</span>person2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/********* end *********/</span>        <span class="token comment" spellcheck="true">// 强制类型转换(向下转型) 调用Chinese类特有的方法shadowBoxing()</span>        <span class="token comment" spellcheck="true">// 强制类型转换(向下转型) 调用English类特有的方法horseRiding()</span>        <span class="token comment" spellcheck="true">/********* begin *********/</span>        Chinese c <span class="token operator">=</span> <span class="token punctuation">(</span>Chinese<span class="token punctuation">)</span> person1<span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">shadowBoxing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        English e <span class="token operator">=</span> <span class="token punctuation">(</span>English<span class="token punctuation">)</span> person2<span class="token punctuation">;</span>        e<span class="token punctuation">.</span><span class="token function">horseRiding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/********* end *********/</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 定义showEat方法，使用父类作为方法的形参，实现多态，传入的是哪个具体对象就调用哪个对象的eat()方法</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">showEat</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span><span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//这里以父类引用为参数,利用了向上转型,传入的是哪个具体对象就调用哪个对象的eat()方法,体现了JAVA的抽象编程思想。</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 抽象类Person 封装属性name、sex和age</span><span class="token comment" spellcheck="true">// 构造函数初始化name、sex和age</span><span class="token comment" spellcheck="true">// 声明抽象方法eat()</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    String sex<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Chinese类继承自Person类</span><span class="token comment" spellcheck="true">// 构造函数初始化name、sex和age</span><span class="token comment" spellcheck="true">// 重写父类方法eat() 输出'姓名：name，性别：sex，年龄：age，我是中国人，我喜欢吃饭！'</span><span class="token comment" spellcheck="true">// 定义子类特有方法shadowBoxing(),当父类引用指向子类对象时无法调用该方法 输出'name在练习太极拳！'</span><span class="token keyword">class</span> <span class="token class-name">Chinese</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token function">Chinese</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span>String s<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        sex <span class="token operator">=</span> s<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"，性别："</span><span class="token operator">+</span>sex<span class="token operator">+</span><span class="token string">"，年龄："</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"，我是中国人，我喜欢吃饭！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shadowBoxing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"在练习太极拳！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// English类继承自Person类</span><span class="token comment" spellcheck="true">// 构造函数初始化name、sex和age</span><span class="token comment" spellcheck="true">// 重写父类方法eat() 输出'姓名：name，性别：sex，年龄：age，我是英国人，我喜欢吃三明治!'</span><span class="token comment" spellcheck="true">// 定义子类特有方法horseRiding(),当父类引用指向子类对象时无法调用该方法 输出'name在练习骑马！'</span><span class="token keyword">class</span> <span class="token class-name">English</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/********* begin *********/</span>    <span class="token keyword">public</span> <span class="token function">English</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span>String s<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        sex <span class="token operator">=</span> s<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"，性别："</span><span class="token operator">+</span>sex<span class="token operator">+</span><span class="token string">"，年龄："</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"，我是英国人，我喜欢吃三明治！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">horseRiding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"在练习骑马！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/********* end *********/</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象思想,封装,继承,构造函数,super()和this()</title>
      <link href="/2019/01/01/feng-zhuang-ji-cheng-gou-zao-han-shu-super-he-this/"/>
      <url>/2019/01/01/feng-zhuang-ji-cheng-gou-zao-han-shu-super-he-this/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h1><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器:"></a>构造器:</h3><blockquote><p>new就是一个构造器，作用是：<strong>①分配空间；②赋初始值</strong>（避免错误，简化输入）；<code>new Object(Parameters)</code>构造器调用构造函数，传参为了赋初始值；</p></blockquote><h3 id="对象的基本元素："><a href="#对象的基本元素：" class="headerlink" title="对象的基本元素："></a>对象的基本元素：</h3><blockquote><p><strong>属性和方法</strong> 类成员（属性和方法）。<strong>属性</strong>最为重要，<u>属性的集合是一个状态，方法是一个状态到另一个状态的桥梁</u>；</p></blockquote><h3 id="封装："><a href="#封装：" class="headerlink" title="封装："></a>封装：</h3><blockquote><p>属性和处理属性的方法集合起来。<u>把数据及数据的操作方法放在一起，作为一个相互依存的整体</u>，即<strong>对象</strong>。<br>面向对象是基于面向过程而言的，<u>面向对象是将功能等通过对象来实现，将功能封装进对象之中，让对象去实现具体的细节</u>；<br>这种思想是将数据作为第一位，而方法或者说是算法作为其次，这是对数据一种优化，操作起来更加的方便，简化了过程。</p></blockquote><h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>访问权限的控制常被称为是具体实现的隐藏。把数据和方法包装进类中，以及具体实现的隐藏共同被称为<strong>封装</strong>。</p><blockquote><p><code>public</code>：可以被所有其他类访问；</p></blockquote><blockquote><p><code>protected</code>：自身、子类、及同一个包中类（接受包外的子类访问）；</p></blockquote><blockquote><p><code>default</code>：同一包中的类可以访问，声明时没有加修饰符，认为是 friendly（拒绝一切外包访问）；</p></blockquote><blockquote><p><code>private</code>：只能被自己访问和修改。</p></blockquote><p><strong>类的访问控制符只有三种:<code>public private protected</code> <code>default</code>是无访问控制符</strong></p><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><blockquote><p>在一个子类被创建的时候，<strong>首先会在内存中创建一个父类对象，然后在父类对象外部放上子类独有的属性</strong>，两者合起来形成一个<strong>子类的对象</strong>。<br>继承使子类拥有父类所有的属性和方法，但是父类对象中的私有属性和方法，子类是无法访问到的，<strong>只是拥有，但不能使用</strong>。子类不能继承父类的构造函数，只是显式或隐式调用，可以从子类调用超类的构造函数。<br>用<code>new</code>创建子类的对象时，若子类没有带参构造函数，将先执行父类的无参构造函数，然后再执行自己的构造函数。父类定义了有参的构造函数后，可以不定义无参的构造函数，系统也不会提供默认的无参构造函数。这时子类只能调用父类的有参构造函数。<br><strong>Java类是单继承，Java接口可以多继承</strong>。类可以实现多个接口，接口可以继承（扩展）多个接口。先继承后实现接口。</p></blockquote><h2 id="组合和继承"><a href="#组合和继承" class="headerlink" title="组合和继承"></a>组合和继承</h2><blockquote><p><strong>组合是指在新类里面创建原有的类的对象，重复利用已有类的功能。</strong>（“has-a”）<br>组合和继承都允许在新的类中设置子对象，只是组合是显式的，而继承是隐式的。组合中的整体类和继承中的子类对应，组合中的局部类和继承中的父类对应。<br>###组合和继承的选择规则：<br>①除非两个类之间是“is-a”的关系，否则不要轻易地使用继承。过多的使用继承会破坏代码的可维护性，当父类修改时，会影响所有继承他的子类，增加了程序维护的难度和成本。<br>②不要仅仅为实现多态而使用继承，如果类之间没有“is-a”关系，可以通过实现接口与组合的方式来达到相同的目的。</p></blockquote><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p><strong>用来在对象实例化时初始化对象的成员变量</strong></p><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><blockquote><p>①方法名必须和类名相同，<u>不能有返回值（也不能为<code>void</code>）</u>；<br>②一个类可以有多个构造函数，没有定义的话，编译器会在源代码编译成字节码文件的过程中会提供一个没有参数的默认的构造方法。若定义后，不会再创建默认的构造方法；<br>③构造函数的参数有（0到多个）；<br>④构造函数在对象实例化时会被自动调用，且只运行一次；普通方法是在程序执行到时才调用且可以被该对象调用多次；<br>⑤构造函数的作用是完成对象的初始化；<br>⑥构造函数不能被继承，不能被覆盖，能被重载；<br>⑦子类可以通过<code>super()</code>关键字来显示调用父类的构造函数，父类没有提供无参构造，子类的构造函数中必须显式得调用父类的构造函数；<br>⑧父类和子类都没有定义构造函数时，编译器都会为父类生成一个默认的无参构造，给子类也生成一个默认的无参的构造函数；<br>⑨构造方法会在成员变量之后初始化；<br>⑩构造方法不能被<code>static</code> <code>final</code> <code>synchronize</code> <code>abstract</code> <code>native</code>修饰，但可以被<code>public</code> <code>private</code> <code>protect</code>修饰。</p></blockquote><blockquote><p>在继承的时候，父类当然也有构造方法，如果你要创建子类的对象，那么执行的过程首先是调用父类的无参构造方法生成父类的对象，然后再调用子类的无参构造方法来生成子类对象。继承的时候都是先生成父类的对象，然后再生成子类的对象。<br>通过使用 this关键字带上参数，可以在一个构造函数中调用另外一个构造函数。这是 this除了单纯表示“当前对象”(注意是针对对象而不是类的概念)之外的第二个作用。<br>###但是注意3点:<br>①必须放在第一行；<br>②只能调用一个其它的构造函数。(也许可以这样理解，正是因为有了第一点，如果可以调用多个的话，那么就无法放在“第一行”，所以只能允许一次调用)；<br>③只能是构造函数调用构造函数，普通函数无法调用构造函数。</p></blockquote><h3 id="super-和this"><a href="#super-和this" class="headerlink" title="super()和this()"></a>super()和this()</h3><blockquote><p>①<code>super()</code>关键字表示超类的意思，当前类是从超类继承而来。<br>②<code>this</code>表示当前对象；</p></blockquote><blockquote><p>只有在重写(Override)父类的方法中，<strong>子类要调用继承自父类的方法</strong>，才使用<code>super</code>关键字。<br>使用<code>super()</code>或者<code>this()</code>方法是必须放在构造函数的第一行；<br>调用父类构造方法：super(参数,参数);<br>调用父类成员方法：super.成员方法名(参数,参数);<br>调用父类成员变量赋值：super.成员变量名 = 参数;</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> project1<span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是空参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"---"</span><span class="token operator">+</span><span class="token string">"人都是要睡觉的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Player</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先调用父类空参构造方法，不向父类传递参数，再执行该构造方法的以下代码</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先向父类成员变量age赋值，再执行该构造方法的以下代码</span>        <span class="token keyword">super</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Player</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先调用父类有参构造方法，并向父类传递两个参数，再执行该构造方法的以下代码</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">supercy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先调用父类sleep成员方法，不向父类sleep成员方法传递参数，再执行该构造方法的以下代码</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> project1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dumo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Player p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p1<span class="token punctuation">.</span><span class="token function">supercy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Player p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p2<span class="token punctuation">.</span><span class="token function">supercy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre class=" language-java"><code class="language-java">我是空参构造方法张三<span class="token operator">--</span><span class="token operator">-</span><span class="token number">19</span><span class="token operator">--</span><span class="token operator">-</span>人都是要睡觉的<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>李四<span class="token operator">--</span><span class="token operator">-</span><span class="token number">20</span><span class="token operator">--</span><span class="token operator">-</span>人都是要睡觉的</code></pre><blockquote><p>由于<code>this</code>函数指向的构造函数默认有<code>super()</code>方法，所以规定<code>this()</code>和<code>super()</code>不能同时出现在一个构造函数中<br>因为<code>static</code>方法或者语句块没有实例时可以使用，而此时不需要构造实例，所以不能用<code>this()</code>和<code>super()</code>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类中的私有成员变量进行赋值和访问</title>
      <link href="/2019/01/01/lei-zhong-de-si-you-cheng-yuan-bian-liang-jin-xing-fu-zhi-he-fang-wen/"/>
      <url>/2019/01/01/lei-zhong-de-si-you-cheng-yuan-bian-liang-jin-xing-fu-zhi-he-fang-wen/</url>
      
        <content type="html"><![CDATA[<h2 id="定义一个学生类-提供成员变量姓名和年龄，需要将成员变量私有化-提供对外公共访问的成员方法"><a href="#定义一个学生类-提供成员变量姓名和年龄，需要将成员变量私有化-提供对外公共访问的成员方法" class="headerlink" title="定义一个学生类,提供成员变量姓名和年龄，需要将成员变量私有化,提供对外公共访问的成员方法"></a>定义一个学生类,提供成员变量姓名和年龄，需要将成员变量私有化,提供对外公共访问的成员方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//私有化成员变量</span><span class="token keyword">private</span> String name <span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提供公共访问方法</span><span class="token comment" spellcheck="true">//赋值并获取成员变量</span><span class="token comment" spellcheck="true">//给姓名进行传参并赋值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setname</span><span class="token punctuation">(</span>String n<span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> n <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取姓名的方法</span><span class="token keyword">public</span> String  <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> name <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//给年龄传参并赋值</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setage</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>age <span class="token operator">=</span> a <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//获取年龄的方法</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> age <span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h2><h3 id="成员变量被私有化了-无法通过实例化对象访问私有成员变量，外界不可访问私有成员变量"><a href="#成员变量被私有化了-无法通过实例化对象访问私有成员变量，外界不可访问私有成员变量" class="headerlink" title="成员变量被私有化了,无法通过实例化对象访问私有成员变量，外界不可访问私有成员变量"></a>成员变量被私有化了,无法通过实例化对象访问私有成员变量，外界不可访问私有成员变量</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//创建Student类的对象</span>Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"----"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给学生对象进行赋值</span>s<span class="token punctuation">.</span><span class="token function">setname</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">setage</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"----"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="学生类"><a href="#学生类" class="headerlink" title="学生类"></a>学生类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> project1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name <span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setname</span><span class="token punctuation">(</span>String n<span class="token punctuation">)</span><span class="token punctuation">{</span>    name <span class="token operator">=</span> n <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> name <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setage</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>    age <span class="token operator">=</span> a <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> age <span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> project1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dumo</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"----"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">setname</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">setage</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"----"</span><span class="token operator">+</span>s<span class="token punctuation">.</span><span class="token function">getage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置与管理samba服务器</title>
      <link href="/2019/01/01/pei-zhi-yu-guan-li-samba-fu-wu-qi/"/>
      <url>/2019/01/01/pei-zhi-yu-guan-li-samba-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Samba服务器；"><a href="#安装Samba服务器；" class="headerlink" title="安装Samba服务器；"></a>安装Samba服务器；</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>CentOS 8 boot 64 位<br>window 10 64 位<br>##samba软件包<br>检查是否安装了samba软件包</p></blockquote><pre class=" language-bash"><code class="language-bash">rpm -qa <span class="token operator">|</span> <span class="token function">grep</span> samba</code></pre><blockquote><p>没有安装软件包，则使用yum命令安装</p></blockquote><pre class=" language-shell"><code class="language-shell">yum clean allyum -y install samba</code></pre><blockquote><p>samba软件包如下：</p></blockquote><pre class=" language-shell"><code class="language-shell">samba-4.11.2-13.el8.x86_64samba-libs-4.11.2-13.el8.x86_64samba-common-4.11.2-13.el8.noarchsamba-common-tools-4.11.2-13.el8.x86_64samba-common-libs-4.11.2-13.el8.x86_64samba-client-4.11.2-13.el8.x86_64samba-client-libs-4.11.2-13.el8.x86_64pcp-pmda-samba-5.0.2-5.el8.x86_64</code></pre><h2 id="samba服务"><a href="#samba服务" class="headerlink" title="samba服务"></a>samba服务</h2><blockquote><p>启动samba服务</p></blockquote><pre class=" language-shell"><code class="language-shell">systemctl start smb.service</code></pre><blockquote><p>停止samba服务</p></blockquote><pre class=" language-shell"><code class="language-shell">systemctl stop smb.service</code></pre><blockquote><p>重启samba服务</p></blockquote><pre class=" language-shell"><code class="language-shell">systemctl restart smb.service</code></pre><blockquote><p>查看samba服务状态</p></blockquote><pre class=" language-shell"><code class="language-shell">systemctl status smb.service</code></pre><blockquote><p>开机自启samba服务器</p></blockquote><pre class=" language-shell"><code class="language-shell">systemctl list-unit-files | grep smb</code></pre><h1 id="配置Samba服务器；"><a href="#配置Samba服务器；" class="headerlink" title="配置Samba服务器；"></a>配置Samba服务器；</h1><h2 id="samba主配置文件smb-conf"><a href="#samba主配置文件smb-conf" class="headerlink" title="samba主配置文件smb.conf"></a>samba主配置文件smb.conf</h2><pre class=" language-shell"><code class="language-shell">[myshare]comment = sharepath = /mnt/sharepublic = yesRead only = yes</code></pre><h1 id="设置samba服务的日志和账号。"><a href="#设置samba服务的日志和账号。" class="headerlink" title="设置samba服务的日志和账号。"></a>设置samba服务的日志和账号。</h1><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><blockquote><p>设置日志文件储存路径</p></blockquote><pre class=" language-shell"><code class="language-shell">log file = /var/log/samba/log.%m</code></pre><blockquote><p>设置日志文件最大容量，单位为KB</p></blockquote><pre class=" language-shell"><code class="language-shell">max log size = 50sh</code></pre><h2 id="账号"><a href="#账号" class="headerlink" title="账号"></a>账号</h2><blockquote><p>samba账号不能被直接创建，必须存在对应的同名系统账户。samba中添加账号命令为<code>smbpasswd</code></p></blockquote><pre class=" language-shell"><code class="language-shell">smbpasswd -a user(用户名)</code></pre><blockquote><p>创建系统用户</p></blockquote><pre class=" language-shell"><code class="language-shell">useradd user(用户名)</code></pre><blockquote><p>修改系统用户密码</p></blockquote><pre class=" language-shell"><code class="language-shell">passwd user(用户名)</code></pre><blockquote><p>将系统用户建立为同名的samba账号并设置密码</p></blockquote><pre class=" language-shell"><code class="language-shell">smbpasswd -a user(用户名)</code></pre><h1 id="关闭防火墙，将selinux设置成允许permissive。"><a href="#关闭防火墙，将selinux设置成允许permissive。" class="headerlink" title="关闭防火墙，将selinux设置成允许permissive。"></a>关闭防火墙，将selinux设置成允许permissive。</h1><h2 id="使用firewalld打开关闭防火墙与端口"><a href="#使用firewalld打开关闭防火墙与端口" class="headerlink" title="使用firewalld打开关闭防火墙与端口"></a>使用firewalld打开关闭防火墙与端口</h2><h3 id="firewalld的基本使用"><a href="#firewalld的基本使用" class="headerlink" title="firewalld的基本使用"></a>firewalld的基本使用</h3><blockquote><p>启动： <code>systemctl start firewalld</code></p></blockquote><blockquote><p>关闭： <code>systemctl stop firewalld</code></p></blockquote><blockquote><p>查看状态： <code>systemctl status firewalld</code> </p></blockquote><blockquote><p>开机禁用： <code>systemctl disable firewalld</code></p></blockquote><blockquote><p>开机启用： <code>systemctl enable firewalld</code></p></blockquote><h3 id="systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"><a href="#systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。" class="headerlink" title="systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"></a>systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</h3><blockquote><p>启动一个服务：<code>systemctl start firewalld.service</code></p></blockquote><blockquote><p>关闭一个服务：<code>systemctl stop firewalld.service</code></p></blockquote><blockquote><p>重启一个服务：<code>systemctl restart firewalld.service</code></p></blockquote><blockquote><p>显示一个服务的状态：<code>systemctl status firewalld.service</code></p></blockquote><blockquote><p>在开机时启用一个服务：<code>systemctl enable firewalld.service</code></p></blockquote><blockquote><p>在开机时禁用一个服务：<code>systemctl disable firewalld.service</code></p></blockquote><blockquote><p>查看服务是否开机启动：<code>systemctl is-enabled firewalld.service</code></p></blockquote><blockquote><p>查看已启动的服务列表：<code>systemctl list-unit-files|grep enabled</code></p></blockquote><blockquote><p>查看启动失败的服务列表：<code>systemctl --failed</code></p></blockquote><h3 id="配置firewalld-cmd"><a href="#配置firewalld-cmd" class="headerlink" title="配置firewalld-cmd"></a>配置firewalld-cmd</h3><blockquote><p>查看版本： <code>firewall-cmd --version</code></p></blockquote><blockquote><p>查看帮助： <code>firewall-cmd --help</code></p></blockquote><blockquote><p>显示状态： <code>firewall-cmd --state</code></p></blockquote><blockquote><p>查看所有打开的端口： <code>firewall-cmd --zone=public --list-ports</code></p></blockquote><blockquote><p>更新防火墙规则： <code>firewall-cmd --reload</code></p></blockquote><blockquote><p>查看区域信息:  <code>firewall-cmd --get-active-zones</code></p></blockquote><blockquote><p>查看指定接口所属区域： <code>firewall-cmd --get-zone-of-interface=eth0</code></p></blockquote><blockquote><p>拒绝所有包：<code>firewall-cmd --panic-on</code></p></blockquote><blockquote><p>取消拒绝状态： <code>firewall-cmd --panic-off</code></p></blockquote><blockquote><p>查看是否拒绝： <code>firewall-cmd --query-panic</code></p></blockquote><h3 id="开启一个端口"><a href="#开启一个端口" class="headerlink" title="开启一个端口"></a>开启一个端口</h3><blockquote><p>添加</p></blockquote><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone=public --add-port=80/tcp --permanent（--permanent永久生效，没有此参数重启后失效）</code></pre><blockquote><p>重新载入</p></blockquote><pre class=" language-shell"><code class="language-shell">firewall-cmd --reload</code></pre><blockquote><p>查看</p></blockquote><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone= public --query-port=80/tcp</code></pre><blockquote><p>删除</p></blockquote><pre class=" language-shell"><code class="language-shell">firewall-cmd --zone= public --remove-port=80/tcp --permanent</code></pre><h2 id="将selinux设置成允许permissive"><a href="#将selinux设置成允许permissive" class="headerlink" title="将selinux设置成允许permissive"></a>将selinux设置成允许permissive</h2><pre class=" language-shell"><code class="language-shell">[root@localhost ~]# getenforceEnforcing[root@localhost ~]# setenforce 0[root@localhost ~]# getenforcePermissive</code></pre><h1 id="在window系统中测试samba服务器"><a href="#在window系统中测试samba服务器" class="headerlink" title="在window系统中测试samba服务器"></a>在window系统中测试samba服务器</h1><blockquote><p>在资源管理器地址栏中输入`\192.168.0.1·(samba服务器ip地址)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Linux </tag>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重写和重载,abstract(抽象类)和interface(接口),final,static关键字,多态</title>
      <link href="/2019/01/01/chong-xie-he-chong-zai-abstract-chou-xiang-lei-he-interface-jie-kou-final-static-guan-jian-zi-duo-tai/"/>
      <url>/2019/01/01/chong-xie-he-chong-zai-abstract-chou-xiang-lei-he-interface-jie-kou-final-static-guan-jian-zi-duo-tai/</url>
      
        <content type="html"><![CDATA[<h1 id="重写和重载"><a href="#重写和重载" class="headerlink" title="重写和重载"></a>重写和重载</h1><h3 id="方法重载（overload）："><a href="#方法重载（overload）：" class="headerlink" title="方法重载（overload）："></a>方法重载（overload）：</h3><blockquote><p>必须是同一个类；<br>方法名（也可以叫函数）一样；<br>参数类型不一样或参数数量或顺序不一样；<br>不能通过返回值来判断重载。</p></blockquote><h3 id="方法的重写（override）子类重写了父类的同名方法，两同两小一大原则："><a href="#方法的重写（override）子类重写了父类的同名方法，两同两小一大原则：" class="headerlink" title="方法的重写（override）子类重写了父类的同名方法，两同两小一大原则："></a>方法的重写（override）子类重写了父类的同名方法，两同两小一大原则：</h3><blockquote><p>方法名相同，参数类型相同；<br>子类返回类型是父类返回类型的子类；<br>子类抛出异常小于等于父类方法抛出异常；<br>子类访问权限大于等于父类方法访问权限。<br><img src="https://www.educoder.net/api/attachments/206833"></p></blockquote><blockquote><p><strong>在重写中，运用的是动态单分配，根据<code>new</code>的类型确定对象，从而确定调用的方法；</strong></p></blockquote><blockquote><p><strong>在重载中，运用的是静态多分配，根据静态类型确定对象，不能根据<code>new</code>的类型确定调用方法；</strong></p></blockquote><blockquote><p><strong>多态中， <code>Father f = new Son()</code>。</strong><br>成员变量：编译运行参考左边；<br>成员函数：编译看左边，运行看右边；<br>静态函数：编译运行看左边。</p></blockquote><p><strong><code>abstract</code>(抽象类)和<code>interface</code>(接口)</strong></p><h1 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h1><blockquote><p><strong>用 <code>abstract</code>修饰的类表示抽象类，抽象类位于继承树的抽象层，抽象类不能被实例化。</strong><br><strong>用 <code>abstract</code>修饰的方法表示抽象方法，抽象方法没有方法体。抽象方法用来描述系统具有什么功能，但不提供具体的实现，把具体实现留给继承该类的子类。</strong></p></blockquote><h3 id="抽象类特点："><a href="#抽象类特点：" class="headerlink" title="抽象类特点："></a>抽象类特点：</h3><blockquote><p>含有抽象方法的类必须声明为抽象类（不管其中是否有其他方法）；<br>抽象类可以没有抽象方法，可以有普通方法；<br>抽象类必须被继承，抽象方法必须被重写（若子类还是抽象类，不需要重写）；<br>抽象类不能被实例化（不能直接构造一个该类的对象）。</p></blockquote><h3 id="抽象方法特点："><a href="#抽象方法特点：" class="headerlink" title="抽象方法特点："></a>抽象方法特点：</h3><blockquote><p>在类中没有方法体（抽象方法只需声明，而不需实现某些功能）；<br>抽象类中的抽象方法必须被实现；<br>如果一个子类没有实现父类中的抽象方法，则子类也变成了一个抽象类。<br>接口 <code>interface</code> 中的方法默认为 <code>public abstract</code>（ <code>public</code> <code>abstract</code>可以省略），变量默认为 <code>public static final</code>；类中的方法全部都是抽象方法。只有声明没有实现，在不同类中有不同的方法实现。</p></blockquote><h3 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h3><blockquote><p>接口中只能包含抽象方法和默认方法，不能为普通方法提供方法实现；抽象类中可以包含普通方法；<br>接口里不能定义静态方法（ jdk1.8下可以定义static方法），抽象类可以定义静态方法；<br>接口中只能定义静态常量，不能定义普通成员变量；抽象类即可以定义变量又可以定义静态常量；<br>接口中不包含构造器，抽象类里可以包含构造器，抽象类中的构造器并不是用于创建对象，而是让其他子类调用这些构造器来完成抽象类的初始化操作；<br>接口里不能包含初始化块，但抽象类可以包含；<br>一个类最多只能有一个父类，包括抽象类；但一个类可以直接实现多个接口，通过实现多个接口可以弥补Java单继承的不足。</p></blockquote><h3 id="共同点："><a href="#共同点：" class="headerlink" title="共同点："></a>共同点：</h3><blockquote><p>接口和抽象类都不能被实例化，都位于继承树的顶端，用于被其他类实现的继承；<br>接口和抽象类都可以包含抽象方法，实现接口和继承抽象类的普通子类都必须实现这些方法。<br><img src="https://www.educoder.net/api/attachments/206834"></p></blockquote><p>#final 关键字</p><blockquote><p>final修饰的类，就是最终类，不能被继承。<br>final修饰的方法，就是最终方法，最终方法不能被重写。<br>final修饰一个引用变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。修饰基本数据类型变量时，内容不能变。<br>final成员变量必须在初始化代码块或在构造器中初始化。</p></blockquote><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><blockquote><p>final类：如果一个类不需要有子类，类的实现细节不允许改变，并且确信这个类不会再被扩展，那么就设计成 <code>final</code>类。<br>final方法：①把方法锁定，防止任何继承类修改它的意义和实现。②高效，编译器在遇到调用 <code>final</code>方法时候会转入内嵌机制，大大提升执行效率。</p></blockquote><p>#static 关键字</p><blockquote><p>static修饰的变量称为静态变量，静态变量属于整个类，而局部变量属于方法，只在该方法内有效。 <code>static</code>不能修饰局部变量。 <code>static</code>方法内部不能调用非静态方法。<br>静态变量只能在类主体中定义，不能在方法中定义；<br>static变量只会创建一份，不管创建几个对象，都共用一个变量。<br>类方法指被 <code>static</code>修饰的方法，无 this指针。其他的就是实例方法。类方法可以调用其他类的 <code>static</code>方法。</p></blockquote><h2 id="类方法和对象方法的区别："><a href="#类方法和对象方法的区别：" class="headerlink" title="类方法和对象方法的区别："></a>类方法和对象方法的区别：</h2><h3 id="类方法是属于整个类的，而实例方法是属于类的某个对象的。"><a href="#类方法是属于整个类的，而实例方法是属于类的某个对象的。" class="headerlink" title="类方法是属于整个类的，而实例方法是属于类的某个对象的。"></a>类方法是属于整个类的，而实例方法是属于类的某个对象的。</h3><blockquote><p><strong>由于类方法是属于整个类的，并不属于类的哪个对象，所以类方法的方法体中不能有与类的对象有关的内容。即类方法体有如下限制：</strong></p></blockquote><blockquote><p>类方法中不能引用对象变量；<br>类方法中不能调用类的对象方法；<br>在类方法中不能使用 <code>super</code>、 <code>this</code>关键字。（ <code>this</code>表示当前类的对象，由 <code>static</code>修饰的方法是类直接调用，不需要创建对象，所以不能用 <code>this</code>）；<br>类方法不能被覆盖。</p></blockquote><h3 id="与类方法相比，对象方法几乎没有什么限制："><a href="#与类方法相比，对象方法几乎没有什么限制：" class="headerlink" title="与类方法相比，对象方法几乎没有什么限制："></a>与类方法相比，对象方法几乎没有什么限制：</h3><blockquote><p>对象方法中可以引用对象变量，也可以引用类变量；<br>对象方法中可以调用类方法；<br>对象方法中可以使用 <code>super</code>、 <code>this</code>关键字。</p></blockquote><h3 id="static关键字的作用"><a href="#static关键字的作用" class="headerlink" title="static关键字的作用:"></a>static关键字的作用:</h3><blockquote><p>为某特定数据类型或对象分配单一的存储空间，而与创建对象的个数无关；实现某个方法或属性与类而不是对象关联在一起；<br>静态变量属于类，在内存中只有一个复制，只要静态变量所在的类被加载，这个静态变量就会被分配空间。</p></blockquote><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><blockquote><p><strong>定义：不同类的对象对同一消息做出响应。同一消息可以根据发送对象的不同而采用多种不同的行为方式；</strong></p></blockquote><blockquote><p><strong>多态存在的三个必要条件：继承、重写、父类引用指向子类对象；</strong></p></blockquote><blockquote><p><strong>Java中多态的实现方式：接口实现，继承父类进行方法重写，同一个类中进行方法重载；</strong></p></blockquote><blockquote><p>父类引用指向子类对象，该引用不能再访问子类新增的成员。 <code>Animal cat = new Cat()</code>与直接 <code>new</code>一个父类实例( <code>Animal a = new Animal()</code>)的区别？<br>答：当父类是接口和抽象类时，不能实例化，只能运用多态，向上转型。普通类中，可以在子类中重写父类中的方法，这样就可以访问子类中的重写方法。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
